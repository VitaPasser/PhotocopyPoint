@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": false,
    "cutClient": false,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": false,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "BothDirections" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "org.vitapasser.photocopypoint.Model.Register",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1272718558 { 
   	label=vitapasser
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_271678553 { 
   	label=photocopypoint
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   



Money1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Money</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   unit: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   value: Double </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Money(value: Double, unit: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ sum(money: Money): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ unit(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ value(): Double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Operator1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Operator</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: Long </TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Operator(id: Long, name: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ id(): Long</TD></TR>
<TR><TD ALIGN="LEFT" >+ name(): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Order1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Order</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fullName: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   operator: Operator </TD></TR>
<TR><TD ALIGN="LEFT" >-   phoneNumber: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   price: Money </TD></TR>
<TR><TD ALIGN="LEFT" >-   term: Term </TD></TR>
<TR><TD ALIGN="LEFT" >-   typeItems: List&lt;TypeItem&gt; </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- Order()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addType(name: String, typeList: TypeList, count: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ create(): Order</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFullName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOperator(): Operator</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPhoneNumber(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPrice(): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTerm(): Term</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTypeItems(): List&lt;TypeItem&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ makePayment(countPayMoney: Money, fullName: String, phoneNumber: String, pickUpStation: PickUpStation, ticketList: TicketList): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ setFullName(fullName: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setOperator(operator: Operator)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPhoneNumber(phoneNumber: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

OrderIDAndOddMany1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)OrderIDAndOddMany</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   oddMoney: Money </TD></TR>
<TR><TD ALIGN="LEFT" >-   orderID: long [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ OrderIDAndOddMany(orderID: long, oddMoney: Money)</TD></TR>
<TR><TD ALIGN="LEFT" >+ oddMoney(): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ orderID(): long</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];



PickUpStation1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PickUpStation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   address: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   connectionToDataBase: Connection </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ PickUpStation(connectionToDataBase: Connection, address: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ address(): String</TD></TR>
<TR><TD ALIGN="LEFT" >- checkAffectRows(affectedRows: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ connectionToDataBase(): Connection</TD></TR>
<TR><TD ALIGN="LEFT" >+ fixSale(order: Order, countPayMoney: Money): OrderIDAndOddMany</TD></TR>
<TR><TD ALIGN="LEFT" >- getId(statement: PreparedStatement): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOperator(): Operator</TD></TR>
<TR><TD ALIGN="LEFT" >- insertClient(id: long): long</TD></TR>
<TR><TD ALIGN="LEFT" >- insertContactInfo(order: Order): long</TD></TR>
<TR><TD ALIGN="LEFT" >- insertMoney(order: Order): long</TD></TR>
<TR><TD ALIGN="LEFT" >- insertOrder(idMoney: long, idClient: long): long</TD></TR>
<TR><TD ALIGN="LEFT" >- insertOrderStaff(idOrder: long, operator: Operator)</TD></TR>
<TR><TD ALIGN="LEFT" >- insertTypeServiceOrder(idOrder: long, type: TypeItem, term: Term)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Register1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Register</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   order: Order </TD></TR>
<TR><TD ALIGN="LEFT" >-   pickUpStation: PickUpStation </TD></TR>
<TR><TD ALIGN="LEFT" >-   ticketList: TicketList </TD></TR>
<TR><TD ALIGN="LEFT" >-   typeList: TypeList </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Register(typeList: TypeList, pickUpStation: PickUpStation, ticketList: TicketList)</TD></TR>
<TR><TD ALIGN="LEFT" >+ addType(name: String, count: int): List&lt;TypeItem&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAllTickets(): List&lt;Ticket&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOrderTypes(): List&lt;TypeItem&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPrice(): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTerm(): Term</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTypes(likeNameTypes: String): List&lt;Type&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ makePayment(countPayMoney: Money, fullName: String, phoneNumber: String): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ newOrder()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Term1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Term</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   value: Integer </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Term(value: Integer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ sum(term: Term): Term</TD></TR>
<TR><TD ALIGN="LEFT" >+ toLocalTime(): LocalTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ value(): Integer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Ticket1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Ticket</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   fullName: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   id: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   isUsed: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   orderId: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   phoneNumber: String </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Ticket(id: long, orderId: long, name: String, isUsed: boolean, fullName: String, phoneNumber: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFullName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getIsUsed(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ getName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOrderId(): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPhoneNumber(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ hashCode(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ setFullName(fullName: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setIsUsed(used: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setName(name: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setOrderId(orderId: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPhoneNumber(phoneNumber: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TicketList1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TicketList</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   connectionToDataBase: Connection </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ TicketList(connectionToDataBase: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkAffectRows(affectedRows: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ connectionToDataBase(): Connection</TD></TR>
<TR><TD ALIGN="LEFT" >+ createTicket(idOrder: long): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAllTickets(): List&lt;Ticket&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- getId(statement: PreparedStatement): long</TD></TR>
<TR><TD ALIGN="LEFT" >- getTickets(statement: PreparedStatement): List&lt;Ticket&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- insertTicket(idOrder: long): long</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Type1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Type</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   create_time: LocalDateTime </TD></TR>
<TR><TD ALIGN="LEFT" >-   id: Long </TD></TR>
<TR><TD ALIGN="LEFT" >-   info: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   money: Money </TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String </TD></TR>
<TR><TD ALIGN="LEFT" >-   term: Term </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Type(id: Long, name: String, info: String, term: Term, money: Money, create_time: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ create_time(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ id(): Long</TD></TR>
<TR><TD ALIGN="LEFT" >+ info(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ money(): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ name(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ term(): Term</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TypeItem1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TypeItem</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   count: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   type: Type </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ TypeItem(type: Type, count: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ count(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMoney(): Money</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTerm(): Term</TD></TR>
<TR><TD ALIGN="LEFT" >+ type(): Type</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TypeList1917344214[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TypeList</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   connectionToDataBase: Connection </TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ TypeList(connectionToDataBase: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getType(typeName: String): Type</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTypes(likeNameTypes: String): List&lt;Type&gt;</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 


Order1917344214 -> Money1917344214[label="price
"];
Order1917344214 -> Operator1917344214[label="operator
"];
Order1917344214 -> Term1917344214[label="term
"];
Order1917344214 -> TicketList1917344214[label="makePayment() -> createTicket()"];
Order1917344214 -> TypeItem1917344214[label="typeItems
"];
Order1917344214 -> TypeList1917344214[label="addType() -> getType()"];
PickUpStation1917344214 -> OrderIDAndOddMany1917344214[label="fixSale() -> OrderIDAndOddMany()"];
PickUpStation1917344214 -> Term1917344214[label="insertTypeServiceOrder() -> value()"];
PickUpStation1917344214 -> Type1917344214[label="insertTypeServiceOrder() -> id()"];
Register1917344214 -> Order1917344214[label="Оброблює
"];
Register1917344214 -> PickUpStation1917344214[label="pickUpStation
"];
Register1917344214 -> TicketList1917344214[label="ticketList
"];
Register1917344214 -> TypeList1917344214[label="typeList
"];
TicketList1917344214 -> Ticket1917344214[label="getTickets() -> Ticket()"];
Type1917344214 -> Money1917344214[label="money
"];
Type1917344214 -> Term1917344214[label="term
"];
TypeItem1917344214 -> Type1917344214[label="type
"];
    
}
@enduml