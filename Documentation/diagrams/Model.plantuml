@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

entity Money << record >> {
  + Money(Double, String): 
  + value(): Double
  + unit(): String
  + sum(Money): Money
  + toString(): String
}
entity Operator << record >> {
  + Operator(Long, String): 
  + id(): Long
  + name(): String
}
class Order {
  - Order(): 
  - price: Money
  - operator: Operator
  - typeItems: List<TypeItem>
  - term: Term
  - phoneNumber: String
  - fullName: String
  + create(): Order
  + makePayment(Money, String, String, PickUpStation, TicketList): Money
  + addType(String, TypeList, int): void
   price: Money
   typeItems: List<TypeItem>
   fullName: String
   term: Term
   phoneNumber: String
   operator: Operator
}
entity OrderIDAndOddMany << record >> {
  + OrderIDAndOddMany(long, Money): 
  + oddMoney(): Money
  + orderID(): long
}
entity OrderList << record >> {
  + OrderList(Connection): 
  + connectionToDataBase(): Connection
  + getFullInfoAboutOrder(long): OrderViewAndTypesViews?
}
entity OrderViewAndTypesViews << record >> {
  + OrderViewAndTypesViews(OrderView, List<TypeView>): 
  + orderView(): OrderView
  + typeViews(): List<TypeView>
}
entity PickUpStation << record >> {
  + PickUpStation(Connection, String): 
  - insertClient(long): long
  - insertContactInfo(Order): long
  - insertOrderStaff(long, Operator): void
  - getId(PreparedStatement): long
  + connectionToDataBase(): Connection
  - insertOrder(long, long): long
  - insertMoney(Order): long
  + fixSale(Order, Money): OrderIDAndOddMany?
  + address(): String
  - checkAffectRows(int): void
  - insertTypeServiceOrder(long, TypeItem, Term): void
   operator: Operator?
}
class Register {
  + Register(TypeList, PickUpStation, TicketList, OrderList): 
  + giveTheOrder(long): void
  + newOrder(): void
  + madeTheOrder(long): void
  + getFullInfoAboutOrder(long): OrderViewAndTypesViews
  + getAllNotMadeTickets(String): List<Ticket>
  + addType(String, int): List<TypeItem>
  + makePayment(Money, String, String): Money
  + getTypes(String): List<Type>
   price: Money
   allTickets: List<Ticket>
   term: Term
   orderTypes: List<TypeItem>
   allMadeTickets: List<Ticket>
}
entity Term << record >> {
  + Term(Integer): 
  + value(): Integer
  + toLocalTime(): LocalTime
  + toString(): String
  + sum(Term): Term
}
class Ticket {
  + Ticket(long, long, String, boolean, boolean, String, String): 
  - id: long
  - orderId: long
  - fullName: String
  - phoneNumber: String
  - name: String
   name: String
   phoneNumber: String
   isReady: boolean
   isDone: boolean
   fullName: String
   orderId: long
   id: long
}
entity TicketList << record >> {
  + TicketList(Connection): 
  - checkAffectRows(int): void
  + connectionToDataBase(): Connection
  - getTickets(PreparedStatement): List<Ticket>
  - insertTicket(long): long
  - getId(PreparedStatement): long
  + createTicket(long): long
  + getAllNotMadeTickets(String): List<Ticket>?
   madeOrderTicket: long
   endOrderTicket: long
   allTickets: List<Ticket>?
   allMadeTickets: List<Ticket>?
}
entity Type << record >> {
  + Type(Long, String, String, Term, Money, LocalDateTime): 
  + info(): String
  + create_time(): LocalDateTime
  + money(): Money
  + id(): Long
  + term(): Term
  + name(): String
}
entity TypeItem << record >> {
  + TypeItem(Type, int): 
  + type(): Type
  + count(): int
   money: Money
   term: Term
}
class TypeList {
  + TypeList(Connection): 
  + getType(String): Type
  + getTypes(String): List<Type>
}

Order                   -->  Money                  
Order                   -->  Operator               
Order                   -->  OrderIDAndOddMany      
Order                   -->  PickUpStation          
Order                   -->  Term                   
Order                   -->  TicketList             
Order                   -->  Type                   
Order                   -->  TypeItem               
Order                   -->  TypeList               
OrderIDAndOddMany       -->  Money                  
OrderList               -->  Money                  
OrderList               -->  OrderViewAndTypesViews 
OrderList               -->  Term                   
OrderList               -->  Type                   
OrderList               -->  TypeItem               
PickUpStation           -->  Money                  
PickUpStation           -->  Operator               
PickUpStation           -->  Order                  
PickUpStation           -->  OrderIDAndOddMany      
PickUpStation           -->  Term                   
PickUpStation           -->  Type                   
PickUpStation           -->  TypeItem               
Register                -->  Money                  
Register                -->  Order                  
Register                -->  OrderList              
Register                -->  OrderViewAndTypesViews 
Register                -->  PickUpStation          
Register                -->  Term                   
Register                -->  Ticket                 
Register                -->  TicketList             
Register                -->  Type                   
Register                -->  TypeItem               
Register                -->  TypeList               
TicketList              -->  Ticket                 
Type                    -->  Money                  
Type                    -->  Term                   
TypeItem                -->  Money                  
TypeItem                -->  Term                   
TypeItem                -->  Type                   
TypeList                -->  Money                  
TypeList                -->  Term                   
TypeList                -->  Type                   
@enduml
